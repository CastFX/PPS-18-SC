package it.scalachess.ai

import it.scalachess.ai.level.{Level, LevelFive, LevelFour, LevelOne, LevelSix, LevelThree, LevelTwo, LevelZero}
import it.scalachess.core.Color
import it.scalachess.core.board.Board
import it.scalachess.core.logic.moves.FullMove

/**
 * The class containing the logic of the A.I.
 * @param difficulty the AI difficulty level
 * @param player the color of the AI player
 */
final case class AI(difficulty: Int, player: Color) {

  val level: Level = {
    require(difficulty >= 0 && difficulty <= AI.maxDifficulty, "The AI difficulty inserted doesn't exists")
    difficulty match {
      case 0 => new LevelZero()
      case 1 => new LevelOne()
      case 2 => new LevelTwo()
      case 3 => new LevelThree()
      case 4 => new LevelFour()
      case 5 => new LevelFive()
      case 6 => new LevelSix()
    }
  }

  /**
   *
   * @param board the board represents the current game situation
   * @param history the history completes the current game situation
   * @return the FullMove generated by the A.I. criteria
   */
  def apply(board: Board, history: Seq[FullMove]): FullMove = level(board, history, player)

}

object AI {
  val maxDifficulty: Int = 6
}
